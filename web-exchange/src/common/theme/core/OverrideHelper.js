import { createMuiTheme } from '@material-ui/core/styles';
import * as r from 'ramda';

/*
 * When creating an override of a Mui component, use
 *   `export default new Override(<Mui component name>, <style hash>, <default props hash>);`
 */
export class Override {
  constructor(name, styles, props) {
    this.name = name;
    this.styles = styles;
    this.props = props;
  }
}

/*
 * Used as a barebones theme to auto generate other shades of colors based on the current palette.
 * These colors are used by the component overrides, and then the main theme, `DolomiteTheme.js`,
 * recreates the theme from the overrides.
 *
 * Because of the dependency the overrides have on the auto generated colors, this was the best way
 * to work around the circular dependency of DolomiteTheme depending on ComponentOverrides which
 * depends on the colors that would be generated by DolomiteTheme (this DolomiteTheme dependency
 * is replaced by a theme which just has the auto generated colors, but no overrides).
 */
function generateFullColorPalette(theme) {
  return createMuiTheme({ palette: theme }).palette;
}

/*
 * Generate the `forTheme(<variants>)` helper provided by the Override helper
 */
const generateForThemeHelper = themeName => {
  return (variants, fallback = null) =>
    variants[themeName] == null ? fallback : variants[themeName];
};

/*
 * Generate MuiTheme `override` hash from array of Override instances
 */
export const generateStyleOverrides = (themeName, palette, overrides) => {
  const colors = generateFullColorPalette(palette);
  return r.mergeAll(
    r.map(
      override => ({
        [override.name]: override.styles(
          generateForThemeHelper(themeName),
          colors
        )
      }),
      overrides
    )
  );
};

/*
 * Generate MuiTheme `props` hash from array of Override instances
 */
export const generateProps = (themeName, overrides) =>
  r.mergeAll(
    r.map(
      override => ({
        [override.name]: override.props(generateForThemeHelper(themeName))
      }),
      overrides
    )
  );
