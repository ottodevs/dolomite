import { createMuiTheme } from '@material-ui/core/styles';
import COLOR_PALETTE from '../color-palette';

/*
 * When creating an override of a Mui component, use
 *   `export default new Override(<Mui component name>, <style hash>, <default props hash>);`
 */
export class Override {
  constructor(name, styles, props) {
    this.name = name;
    this.styles = styles;
    this.props = props;
  }
}

/*
 * Used as a barebones theme to auto generate other shades of colors based on the current palette.
 * These colors are used by the component overrides, and then the main theme, `DolomiteTheme.js`,
 * recreates the theme from the overrides.
 *
 * Because of the dependency the overrides have on the auto generated colors, this was the best way
 * to work around the circular dependency of DolomiteTheme depending on ComponentOverrides which
 * depends on the colors that would be generated by DolomiteTheme (this DolomiteTheme dependency
 * is replaced by a theme which just has the auto generated colors, but no overrides).
 */
export const BaseColorProvider = createMuiTheme({ palette: COLOR_PALETTE }).palette;

/*
 * Generate MuiTheme `override` hash from array of Override instances
 */
export function generateStyleOverrides(overrides) {
  const styles = {};
  for (let i = 0; i < overrides.length; i += 1) {
    const override = overrides[i];
    styles[override.name] = override.styles;
  }
  return styles;
}

/*
 * Generate MuiTheme `props` hash from array of Override instances
 */
export function generateProps(overrides) {
  const props = {};
  for (let i = 0; i < overrides.length; i += 1) {
    const override = overrides[i];
    props[override.name] = override.props;
  }
  return props;
}
